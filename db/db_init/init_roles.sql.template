-- Create roles if they don't exist
DO $$
BEGIN
    -- Create runtime user (non-owner, for app runtime to adhere to RLS)
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${POSTGRES_RUNTIME_USER}') THEN
        CREATE ROLE ${POSTGRES_RUNTIME_USER} WITH LOGIN PASSWORD '${POSTGRES_RUNTIME_PASSWORD}';
    END IF;
    -- Create default PostgreSQL superuser (used for migrations), if not exists
    IF NOT EXISTS (SELECT 1 FROM pg_roles WHERE rolname = '${POSTGRES_USER}') THEN
        CREATE ROLE ${POSTGRES_USER} WITH LOGIN PASSWORD '${POSTGRES_PASSWORD}';
    END IF;
END $$;

-- Grant usage on public schema to the runtime user
GRANT USAGE ON SCHEMA public TO ${POSTGRES_RUNTIME_USER};

-- Grant data manipulation privileges on all existing tables in the public schema to the runtime user
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO ${POSTGRES_RUNTIME_USER};

-- Grant privileges on all sequences in the public schema to the runtime user.
-- Sequences are used for auto-incremented values (e.g., primary keys), so granting USAGE and SELECT allows the runtime user
-- to obtain the next value (via nextval()) and read the current sequence value (via currval()), ensuring proper auto-increment behavior.
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO ${POSTGRES_RUNTIME_USER};

-- Set default privileges so that future tables automatically grant data manipulation rights to the runtime user
ALTER DEFAULT PRIVILEGES IN SCHEMA public
    GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO ${POSTGRES_RUNTIME_USER};

-- Set default privileges so that future sequences automatically grant usage and select rights to the runtime user
ALTER DEFAULT PRIVILEGES IN SCHEMA public
    GRANT USAGE, SELECT ON SEQUENCES TO ${POSTGRES_RUNTIME_USER};